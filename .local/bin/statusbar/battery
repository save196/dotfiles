#!/usr/bin/env python3
"""
poly-battery-status-py: Generates a pretty status-bar string for multi-battery systems on Linux.
Copyright (C) 2020  Falke Carlsen
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import os
import re
from dataclasses import dataclass
from enum import Enum
from pathlib import Path

PSEUDO_FS_PATH = "/sys/class/power_supply/"
CURRENT_CHARGE_FILENAME = "(energy_now|charge_now)"
MAX_CHARGE_FILENAME = "(energy_full|charge_full)"
POWER_DRAW_FILENAME = "(power_now|current_now)"
PERCENTAGE_FORMAT = ".0%"


class Status(Enum):
    CHARGING = 1
    DISCHARGING = 2
    PASSIVE = 3


@dataclass
class Configuration:
    time_to_completion: int
    percentage: float
    status: Status


@dataclass
class Battery:
    status: Status
    current_charge: int
    max_charge: int
    power_draw: int


def get_configuration() -> Configuration:
    # get all batteries on system
    batteries = []
    for power_source in os.listdir(PSEUDO_FS_PATH):
        if re.match(r"^BAT\d+$", power_source):
            current_charge_filename = ""
            max_charge_filename = ""
            power_draw_filename = ""
            for filename in os.listdir(f"{PSEUDO_FS_PATH}{power_source}"):
                if re.match(CURRENT_CHARGE_FILENAME, filename):
                    current_charge_filename = filename
                elif re.match(MAX_CHARGE_FILENAME, filename):
                    max_charge_filename = filename
                elif re.match(POWER_DRAW_FILENAME, filename):
                    power_draw_filename = filename
            batteries.append(Battery(
                get_status(power_source),
                get_bat_value(power_source, current_charge_filename),
                get_bat_value(power_source, max_charge_filename),
                get_bat_value(power_source, power_draw_filename)))

    # calculate global status
    # assumes that if a battery is not passive, it will be discharging or charging
    config_status = Status.PASSIVE
    for bat in batteries:
        if bat.status in (Status.CHARGING, Status.DISCHARGING):
            config_status = bat.status
            break

    # construct and return configuration
    time = calc_time(batteries, config_status)
    percentage = calc_percentage(batteries)
    return Configuration(time, percentage, config_status)


def get_status(bat_name: str) -> Status:
    with open(f"{PSEUDO_FS_PATH}{bat_name}/status", encoding="utf-8") as status_file:
        raw_status = status_file.read().strip()
    if raw_status in ("Full", "Not charging"):
        return Status.PASSIVE
    if raw_status in ("Unknown", "Charging"):
        return Status.CHARGING
    if raw_status == "Discharging":
        return Status.DISCHARGING
    raise ValueError


def get_bat_value(bat_name: str, filename: str) -> int:
    return int(Path(f"{PSEUDO_FS_PATH}{bat_name}/{filename}").open(encoding="utf-8").read().strip())


def calc_time(batteries: list, status: Status) -> int:
    time = 0
    if status == Status.PASSIVE:
        return time
    # get total metrics on configuration
    total_current_charge = sum(bat.current_charge for bat in batteries)
    total_max_charge = sum(bat.max_charge for bat in batteries)
    total_power_draw = sum(bat.power_draw for bat in batteries)
    if total_power_draw < 1:
        total_power_draw = 100000
    if status == Status.DISCHARGING:
        # return number of seconds until empty
        time = (total_current_charge / total_power_draw) * 3600
    elif status == Status.CHARGING:
        # return number of seconds until (optionally relatively) charged
        time = ((total_max_charge - total_current_charge) /
                total_power_draw) * 3600
    return time


def calc_percentage(batteries: list) -> float:
    total_max_charge = sum(bat.max_charge for bat in batteries)
    total_current_charge = sum(bat.current_charge for bat in batteries)
    return total_current_charge / total_max_charge


def calc_display_time(status: Status, seconds: int) -> str:
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) / 60)
    if status == Status.PASSIVE:
        return ""

    # assume charging initially if not passive
    direction = "+"
    if status == Status.DISCHARGING:
        direction = "-"

    # format output digitally, e.g. (+0:09)
    return f" ({direction}{hours}:{minutes:02})"


def print_status(config: Configuration):
    if config.status == Status.PASSIVE:
        icon = ""
        print(f"{icon} 100%")
        return
    if config.status == Status.CHARGING:
        icon = ""
    elif config.percentage >= 0.90:
        icon = ""
    elif config.percentage >= 0.75:
        icon = ""
    elif config.percentage >= 0.40:
        icon = ""
    elif config.percentage >= 0.10:
        icon = ""
    else:
        icon = "❗"
    time = calc_display_time(config.status, config.time_to_completion)
    print(f"{icon} {config.percentage:{PERCENTAGE_FORMAT}}{time}")


def main():
    print_status(get_configuration())


if __name__ == '__main__':
    main()
